@page "/Categories/edit"

@using Microsoft.EntityFrameworkCore
@using crudBlazor.Models
@inject IDbContextFactory<crudBlazor.Data.AppDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Editar</h1>

<h4>Terefas</h4>
<hr />
@if (Category is null)
{
    <p><em>Carregando...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Category" OnValidSubmit="UpdateCategory" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Category.Id" value="@Category.Id" />
                <div class="mb-3">
                    <label for="title" class="form-label">Titulo:</label>
                    <InputText id="title" @bind-Value="Category.Title" class="form-control" />
                    <ValidationMessage For="() => Category.Title" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Descrição:</label>
                    <InputText id="description" @bind-Value="Category.Description" class="form-control" />
                    <ValidationMessage For="() => Category.Description" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Salvar</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/categories">Voltar para lista</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public Category? Category { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Category ??= await context.Categories.FirstOrDefaultAsync(m => m.Id == Id);

        if (Category is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateCategory()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Category!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!CategoryExists(Category!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/categories");
    }

    bool CategoryExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Categories.Any(e => e.Id == id);
    }
}
